{
  "metadataVersion": "0.1.0",
  "source": {
    "hash": "0xa0ca8d6bdf7f39ad1e91dfea7d85ba1843ed146c13f6429c57c793a108963b67",
    "language": "ink! 3.0.0-rc2",
    "compiler": "rustc 1.49.0-nightly"
  },
  "contract": {
    "name": "contract_transfer",
    "version": "3.0.0-rc1",
    "authors": [
      "Parity Technologies <admin@parity.io>"
    ]
  },
  "spec": {
    "constructors": [
      {
        "args": [],
        "docs": [
          " Creates a new instance of this contract."
        ],
        "name": [
          "new"
        ],
        "selector": "0xd183512b"
      }
    ],
    "docs": [],
    "events": [],
    "messages": [
      {
        "args": [
          {
            "name": "value",
            "type": {
              "displayName": [
                "Balance"
              ],
              "type": 1
            }
          }
        ],
        "docs": [
          " Transfers `value` amount of tokens to the caller.",
          "",
          " # Errors",
          "",
          " - Returns `Error::InsufficientFunds` in case the requested transfer of",
          "   `value` exceeds the contracts balance.",
          " - Returns `Error::BelowSubsistenceThreshold` in case the requested transfer",
          "   of `value` would have brought the contract's balance below the subsistence",
          "   threshold.",
          " - Returns `Error::TransferFailed` in case the transfer failed for another",
          "   reason."
        ],
        "mutates": true,
        "name": [
          "give_me"
        ],
        "payable": false,
        "returnType": {
          "displayName": [
            "Result"
          ],
          "type": 2
        },
        "selector": "0x49130099"
      },
      {
        "args": [],
        "docs": [
          " Returns `true` if the token amount which the contract received",
          " with this call is exactly `10`.",
          "",
          " # Note",
          "",
          " The method needs to be annotated with `payable`; only then it is",
          " allowed to receive value as part of the call."
        ],
        "mutates": false,
        "name": [
          "was_it_ten"
        ],
        "payable": true,
        "returnType": {
          "displayName": [
            "bool"
          ],
          "type": 5
        },
        "selector": "0xcafebabe"
      }
    ]
  },
  "storage": {
    "struct": {
      "fields": []
    }
  },
  "types": [
    {
      "def": {
        "primitive": "u128"
      }
    },
    {
      "def": {
        "variant": {
          "variants": [
            {
              "fields": [
                {
                  "type": 3
                }
              ],
              "name": "Ok"
            },
            {
              "fields": [
                {
                  "type": 4
                }
              ],
              "name": "Err"
            }
          ]
        }
      },
      "params": [
        3,
        4
      ],
      "path": [
        "Result"
      ]
    },
    {
      "def": {
        "tuple": []
      }
    },
    {
      "def": {
        "variant": {
          "variants": [
            {
              "discriminant": 0,
              "name": "TransferFailed"
            },
            {
              "discriminant": 1,
              "name": "InsufficientFunds"
            },
            {
              "discriminant": 2,
              "name": "BelowSubsistenceThreshold"
            }
          ]
        }
      },
      "path": [
        "contract_transfer",
        "give_me",
        "Error"
      ]
    },
    {
      "def": {
        "primitive": "bool"
      }
    }
  ]
}